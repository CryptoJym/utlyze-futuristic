Utlyze ‒ UX/visual review and engineering guidance
1 Overview of the navigation architecture (current state)
Dynamic partials – The repository implements a shared navigation and footer. Each page has a header/footer mount and the JavaScript loadPartials() function fetches /partials/header.html and /partials/footer.html via fetch() and injects them into the mount points. If fetching fails (for example when running from file://) or the device is considered mobile, the function injects a fallback header and fallback footer defined in app.js
GitHub
. The dynamic loading is invoked on DOM ready along with other premium effects
GitHub
.
Mobile menu implementation – When the viewport is below 900 px, the navigation collapses into a hamburger button (.nav‑toggle). Clicking the toggle calls setMenuState() to add the .nav‑links--open class and updates aria-expanded attributes; clicking outside or pressing Esc closes it
GitHub
. The CSS uses a mobile‑first approach where .nav‑links is positioned off‑canvas (transform: translateX(-100%)) by default and slides in when .nav‑links--open is applied
GitHub
.
Fallback header – The fallback markup defined in app.js is a basic unordered list of links with no nav toggle or responsive styling
GitHub
. It appears to predate the premium navigation and is injected for all mobile user‑agents because loadPartials() skips the fetch when isMobile is true
GitHub
.
Pricing page – The pricing page lists three tiers with one‑time setup fees and monthly pricing ($1,100, $2,200 and $3,300)
GitHub
. These values correspond to the “1.1”, “2.2” and “3.3” price points mentioned by the user.
2 Observed issues from code and live site
Issue	Evidence / root cause	Impact
Mobile hamburger menu shows a dark banner with “Menu Home” and no items	1) app.js injects a basic fallbackHeaderHTML on mobile devices
GitHub
. This fallback lacks the <button class="nav-toggle"> element and the .nav-links container used by the premium menu; instead it renders a simple list. 2) Because isMobile uses a regex test for iPhone/iPad/iPod/Android
GitHub
, the fetch is skipped on all real mobile browsers and therefore the stale fallback is always used.	Users on phones see an outdated menu (title “Menu” with only a bold “Home” link), cannot open/close navigation and cannot access other pages from the menu. The dark banner is the .site-header container with no proper styling applied.
Two different menus appear	In addition to the fallback menu, the actual header partial (partials/header.html) is fetched on desktop. When the user shrinks the window after page load, both the fallback and the proper nav may exist in the DOM, causing overlapping menus.	Confusing UI: duplicate logos, overlapping menus, inconsistent styling.
Missing path prefix logic	The documentation suggests a pathPrefix check to fetch ../partials/header.html for sub‑directories
GitHub
, but the implementation always fetches /partials/header.html
GitHub
. Because a leading slash resolves to the site root, this works for hosted pages but fails when testing locally (file path) or when the site is deployed in a sub‑folder.	In local or offline testing the header fails to load, triggering the fallback.
Inconsistent mount points	Some pages (e.g., ROI or Venture Studio) define additional sticky sub‑navigation bars or embed custom CSS; in those files it’s easy to forget to include <header id="site-header-mount"></header> or <footer id="site-footer-mount"></footer>. The repository uses “subnav” blocks and sticky CTA bars which may cover the header on scroll.	The header may be missing or partially hidden on certain pages, and the sticky ROI bar overlays the menu on mobile.
Incomplete pricing tiers	The pricing page correctly lists $1,100/$2,200/$3,300 monthly tiers
GitHub
, but some copy still refers to “AI agents starting at $2,600” (the old price) on other pages or marketing materials.	Misalignment between marketing content and pricing page may confuse customers.
Accessibility and ARIA issues	The fallback menu does not include aria-expanded attributes or keyboard navigation. On mobile, the menu cannot be closed with the Esc key because the fallback markup lacks event listeners.	Affects screen‑reader users and keyboard navigation.
Visual glitches on mobile	When the fallback menu is injected, the header container lacks the glassmorphism styling defined in style.css. The .site-header still applies padding and a light border, resulting in a grey bar at the top of the page.	Visual inconsistency; appears broken or out of brand.
3 Root cause analysis
Stale fallback markup – The fallbackHeaderHTML string in app.js was copied from an older prototype. It doesn’t contain the responsive menu structure (nav toggle button, .nav-links container or glassmorphism classes). When injected, it produces a basic “Menu” heading and “Home” link. Since the fallback is triggered on all mobile devices (isMobile regex), this is what mobile users see
GitHub
.
Unnecessary mobile gating – The code deliberately avoids fetching partials on mobile devices (if (!isMobile && !isLocalFile) { fetch… } else use fallback)
GitHub
. There is no technical reason to skip the fetch on mobile; the partial is lightweight and served from the same origin. This gating was likely intended for offline file:// usage but inadvertently penalises real users.
Duplicate menus from window resize – Because the fetch happens only once on initial load, if the user loads the page on a wide screen (desktop nav) and then resizes it to mobile width, the .nav-links container persists but CSS hides it; the fallback is never used. Conversely, if the page loads on a mobile width, the fallback remains when the user grows the viewport, so there are two navigation bars.
Path prefix logic documented but not implemented – The docs mention using pathPrefix to load partials from sub‑directories
GitHub
, but the actual code always uses an absolute /partials/header.html path. This works only when the site is hosted at the root domain and fails for offline or sub‑folder deployments; the fallback is then injected, replicating the bug.
CSS missing for fallback – The global stylesheet defines the .site-header, .nav-toggle, .nav-links and .nav-links--open classes. However, those classes are not present in the fallback markup. Consequently, the fallback menu is unstyled and appears as a dark bar.
4 Recommended fixes and implementation order
4.1 Unify header markup and eliminate stale fallback
Always attempt to fetch header and footer partials – In app.js, remove or modify the isMobile condition. The code should always fetch /partials/header.html and /partials/footer.html, except when the protocol is file:. Fallback injection should be used only when the fetch fails (e.g., offline). Replace:
const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
…
if (!isMobile && !isLocalFile) {
    // fetch partials
}
if (!headerLoaded) {
    headerMount.innerHTML = fallbackHeaderHTML;
}
with:
const isLocalFile = window.location.protocol === 'file:';
// Always try to fetch partials unless running from local files
let headerLoaded = false;
if (!isLocalFile) {
    try {
        const resp = await fetch('/partials/header.html');
        if (resp.ok) {
            headerMount.innerHTML = await resp.text();
            headerLoaded = true;
        }
    } catch (_) {}
}
if (!headerLoaded) {
    headerMount.innerHTML = fallbackHeaderHTML;
}
Update the fallback markup – Copy the complete HTML from partials/header.html into the fallbackHeaderHTML template string so that it matches the dynamic header exactly. To preserve indentation, use backticks and escape backticks inside the string. Ensure it contains:
<button class="nav-toggle" aria-label="Toggle navigation menu" aria-expanded="false"> with three <span class="nav-toggle-line"> bars.
<ul class="nav-links"> list with links: Home, AI Agents, Pricing & ROI, Use Cases, Venture Studio, Portfolio, About, Resources, Contact
GitHub
.
The wrapper <header class="site-header"> with the same classes used in the partial. This ensures the glassmorphism styles apply.
Ensure ARIA attributes and keyboard support – The fallback header should mirror the ARIA attributes of the primary navigation. Include aria-expanded on the toggle, role="navigation", and aria-label on the <nav> element. This will let the existing initializeMobileMenu() function bind listeners and support closing with the Esc key.
Remove redundant “Menu” label – The fallback currently displays a <span>Menu</span> which results in the dark bar labelled “Menu Home.” Exclude this label from the updated markup.
Consolidate CSS – Ensure the global stylesheet only defines one set of navigation classes. Delete any old .menu or .dropdown classes that are no longer used. Confirm that .nav-links, .nav-links--open, .nav-toggle, and .site-header have mobile and desktop definitions
GitHub
.
4.2 Unify navigation loading across pages
Add mount points consistently – Audit all HTML pages (home, pricing, use‑cases, ROI, companies, venture studio, about, resources, contact) to ensure they contain:
<header id="site-header-mount"></header>
…
<footer id="site-footer-mount"></footer>
<script src="/app.js"></script>
The mount points should be placed immediately inside the <body> so the header appears at the top. Remove any hard‑coded navigation markup from individual pages to avoid duplicates.
Implement path‑prefix logic (optional) – If the site may be deployed within a sub‑directory (e.g., https://example.com/utlyze-futuristic/), implement the documented pathPrefix logic to resolve partials correctly
GitHub
. For each page, compute pathPrefix based on window.location.pathname and call fetch(pathPrefix + 'partials/header.html').
Load partials for mobile devices – After removing the mobile gating, verify that header and footer load correctly on iOS/Android browsers. Test with device emulators to ensure the fetch call works (it should, since the origin is the same).
Test window resizing – After implementing the unified header, resizing the window from desktop to mobile width should not produce duplicate menus. The CSS will collapse the menu automatically.
4.3 Sync pricing across the site
Monthly pricing – Confirm that all references to AI agent tiers use the $1,100/$2,200/$3,300 monthly pricing found on the pricing page
GitHub
. Update any stale copy (e.g., hero banners, ROI calculator summary) that still mention $2,600 or other numbers.
Setup fees – The pricing page lists setup fees of $5 k, $10 k and $25 k+
GitHub
. Ensure these amounts appear consistently across marketing sections. Use whole numbers rather than ranges unless the user specifically wants ranges.
Format – Use the same format throughout: “One‑time setup: $X” on its own line followed by “$1,100/month,” etc. Avoid writing “1.1,” “2.2,” or “3.3” without units; these numbers could be mis‑interpreted.
4.4 Additional UI/UX improvements
Sticky ROI sub‑nav – On the ROI page, the sticky subnav (.roi-subnav) uses a z-index of 5 and may overlap the header. Increase its top offset or lower its z‑index so it never covers the navigation. When the mobile menu is open, the subnav should slide underneath.
Active link highlighting – The setActiveNavLink() function compares the current path to link hrefs
GitHub
. It does not handle trailing slashes or query strings. Normalize both strings (currentPath.replace(/\/$/, '')) before comparison so that /pricing and /pricing/ both highlight the Pricing link.
Keyboard focus trap – When the mobile menu is open, consider trapping focus inside the menu and restoring focus to the toggle when closed (for accessibility). Implement by storing the previously focused element and using tabindex="-1" on menu items.
Form and CTA consistency – Ensure that the “Get a Demo” button and ROI calculator use consistent colours and hover states across pages. Some forms use inline CSS; migrate these styles into style.css for maintainability.
Performance – Lazy‑load heavy assets (hero animations, background particles) only after the header and above‑the‑fold content have loaded. This will improve perceived performance on slower connections.
5 Guidance for implementation (for a junior engineer)
Set up local environment – Clone the repository and serve it with a simple HTTP server (e.g., npx http-server . or python -m http.server). Avoid loading pages directly from the filesystem because this will trigger the fallback. Install Playwright dev dependencies if you want to run end‑to‑end tests.
Refactor app.js:
Remove the isMobile check from loadPartials() and always attempt to fetch partials.
Copy the content of /partials/header.html and /partials/footer.html into the fallback strings. Verify that the nav-toggle button and .nav-links list are included.
Add comments explaining why fallback exists (for offline mode) and when it is triggered.
Update setActiveNavLink() to normalise paths.
Update style.css:
Review the navigation styles (likely around lines 1600+) and ensure they apply to both the dynamic and fallback markup. Delete unused classes from earlier experiments.
Test the mobile menu open/close transitions and adjust transition values for smoothness.
Clean up HTML files:
Search each page for any hard‑coded navigation markup and remove it. Insert <header id="site-header-mount"></header> and <footer id="site-footer-mount"></footer> in each page template.
Ensure <script src="/app.js"></script> is present before the closing </body> tag on all pages so the navigation loads correctly.
For the ROI page and other pages with sticky subnavs, adjust z-index values so they do not overlap the header.
Synchronise pricing values – Search the repository for “$2,600”, “$6,000” or other old price points and update them to $1,100, $2,200 and $3,300. Use the same formatting as the pricing page
GitHub
.
Test thoroughly:
Use Chrome’s mobile emulation (Device Toolbar) to test on iPhone and Android profiles. Confirm that the menu opens, closes, and lists all links.
Run the provided Playwright tests (npm install && npm run test:e2e) to ensure navigation links resolve correctly.
Manually navigate to each page and verify that the header and footer look consistent and that the active link is highlighted.
Resize the window from desktop to mobile widths and confirm that the menu adapts without duplicating the header.
Check accessibility with keyboard navigation and screen readers.
By following these steps, the engineer should be able to correct the mobile navigation bug, remove redundant menus, ensure pricing consistency and deliver a polished, unified experience across the entire site.
